package org.apache.poi.hssf.record.chart;

import java.util.Collections;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.Supplier;
import org.apache.poi.hssf.record.HSSFRecordTypes;
import org.apache.poi.hssf.record.RecordInputStream;
import org.apache.poi.hssf.record.StandardRecord;
import org.apache.poi.ss.util.CellUtil;
import org.apache.poi.util.BitField;
import org.apache.poi.util.BitFieldFactory;
import org.apache.poi.util.GenericRecordUtil;
import org.apache.poi.util.LittleEndianOutput;

public final class TextRecord extends StandardRecord {
    public static final short DATA_LABEL_PLACEMENT_ABOVE = 5;
    public static final short DATA_LABEL_PLACEMENT_AUTO = 9;
    public static final short DATA_LABEL_PLACEMENT_AXIS = 4;
    public static final short DATA_LABEL_PLACEMENT_BELOW = 6;
    public static final short DATA_LABEL_PLACEMENT_CENTER = 3;
    public static final short DATA_LABEL_PLACEMENT_CHART_DEPENDENT = 0;
    public static final short DATA_LABEL_PLACEMENT_INSIDE = 2;
    public static final short DATA_LABEL_PLACEMENT_LEFT = 7;
    public static final short DATA_LABEL_PLACEMENT_OUTSIDE = 1;
    public static final short DATA_LABEL_PLACEMENT_RIGHT = 8;
    public static final short DATA_LABEL_PLACEMENT_USER_MOVED = 10;
    public static final short DISPLAY_MODE_OPAQUE = 2;
    public static final short DISPLAY_MODE_TRANSPARENT = 1;
    public static final byte HORIZONTAL_ALIGNMENT_BOTTOM = 3;
    public static final byte HORIZONTAL_ALIGNMENT_CENTER = 2;
    public static final byte HORIZONTAL_ALIGNMENT_JUSTIFY = 4;
    public static final byte HORIZONTAL_ALIGNMENT_LEFT = 1;
    public static final short ROTATION_NONE = 0;
    public static final short ROTATION_ROTATED_90_DEGREES = 2;
    public static final short ROTATION_ROTATED_90_DEGREES_CLOCKWISE = 3;
    public static final short ROTATION_TOP_TO_BOTTOM = 1;
    public static final byte VERTICAL_ALIGNMENT_BOTTOM = 3;
    public static final byte VERTICAL_ALIGNMENT_CENTER = 2;
    public static final byte VERTICAL_ALIGNMENT_JUSTIFY = 4;
    public static final byte VERTICAL_ALIGNMENT_TOP = 1;
    private static final BitField autoBackground = BitFieldFactory.getInstance(128);
    private static final BitField autoColor = BitFieldFactory.getInstance(1);
    private static final BitField autoGeneratedText = BitFieldFactory.getInstance(16);
    private static final BitField autoLabelDeleted = BitFieldFactory.getInstance(64);
    private static final BitField dataLabelPlacement = BitFieldFactory.getInstance(15);
    private static final BitField generated = BitFieldFactory.getInstance(32);
    private static final BitField rotation = BitFieldFactory.getInstance(1792);
    private static final BitField showBubbleSizes = BitFieldFactory.getInstance(8192);
    private static final BitField showCategoryLabelAsPercentage = BitFieldFactory.getInstance(2048);
    private static final BitField showKey = BitFieldFactory.getInstance(2);
    private static final BitField showLabel = BitFieldFactory.getInstance(16384);
    private static final BitField showValue = BitFieldFactory.getInstance(4);
    private static final BitField showValueAsPercentage = BitFieldFactory.getInstance(4096);
    public static final short sid = 4133;
    private static final BitField vertical = BitFieldFactory.getInstance(8);
    private short field_10_indexOfColorValue;
    private short field_11_options2;
    private short field_12_textRotation;
    private byte field_1_horizontalAlignment;
    private byte field_2_verticalAlignment;
    private short field_3_displayMode;
    private int field_4_rgbColor;
    private int field_5_x;
    private int field_6_y;
    private int field_7_width;
    private int field_8_height;
    private short field_9_options1;

    /* access modifiers changed from: protected */
    public int getDataSize() {
        return 32;
    }

    public short getSid() {
        return sid;
    }

    public TextRecord() {
    }

    public TextRecord(TextRecord textRecord) {
        super(textRecord);
        this.field_1_horizontalAlignment = textRecord.field_1_horizontalAlignment;
        this.field_2_verticalAlignment = textRecord.field_2_verticalAlignment;
        this.field_3_displayMode = textRecord.field_3_displayMode;
        this.field_4_rgbColor = textRecord.field_4_rgbColor;
        this.field_5_x = textRecord.field_5_x;
        this.field_6_y = textRecord.field_6_y;
        this.field_7_width = textRecord.field_7_width;
        this.field_8_height = textRecord.field_8_height;
        this.field_9_options1 = textRecord.field_9_options1;
        this.field_10_indexOfColorValue = textRecord.field_10_indexOfColorValue;
        this.field_11_options2 = textRecord.field_11_options2;
        this.field_12_textRotation = textRecord.field_12_textRotation;
    }

    public TextRecord(RecordInputStream recordInputStream) {
        this.field_1_horizontalAlignment = recordInputStream.readByte();
        this.field_2_verticalAlignment = recordInputStream.readByte();
        this.field_3_displayMode = recordInputStream.readShort();
        this.field_4_rgbColor = recordInputStream.readInt();
        this.field_5_x = recordInputStream.readInt();
        this.field_6_y = recordInputStream.readInt();
        this.field_7_width = recordInputStream.readInt();
        this.field_8_height = recordInputStream.readInt();
        this.field_9_options1 = recordInputStream.readShort();
        this.field_10_indexOfColorValue = recordInputStream.readShort();
        this.field_11_options2 = recordInputStream.readShort();
        this.field_12_textRotation = recordInputStream.readShort();
    }

    public void serialize(LittleEndianOutput littleEndianOutput) {
        littleEndianOutput.writeByte(this.field_1_horizontalAlignment);
        littleEndianOutput.writeByte(this.field_2_verticalAlignment);
        littleEndianOutput.writeShort(this.field_3_displayMode);
        littleEndianOutput.writeInt(this.field_4_rgbColor);
        littleEndianOutput.writeInt(this.field_5_x);
        littleEndianOutput.writeInt(this.field_6_y);
        littleEndianOutput.writeInt(this.field_7_width);
        littleEndianOutput.writeInt(this.field_8_height);
        littleEndianOutput.writeShort(this.field_9_options1);
        littleEndianOutput.writeShort(this.field_10_indexOfColorValue);
        littleEndianOutput.writeShort(this.field_11_options2);
        littleEndianOutput.writeShort(this.field_12_textRotation);
    }

    public TextRecord copy() {
        return new TextRecord(this);
    }

    public byte getHorizontalAlignment() {
        return this.field_1_horizontalAlignment;
    }

    public void setHorizontalAlignment(byte b) {
        this.field_1_horizontalAlignment = b;
    }

    public byte getVerticalAlignment() {
        return this.field_2_verticalAlignment;
    }

    public void setVerticalAlignment(byte b) {
        this.field_2_verticalAlignment = b;
    }

    public short getDisplayMode() {
        return this.field_3_displayMode;
    }

    public void setDisplayMode(short s) {
        this.field_3_displayMode = s;
    }

    public int getRgbColor() {
        return this.field_4_rgbColor;
    }

    public void setRgbColor(int i) {
        this.field_4_rgbColor = i;
    }

    public int getX() {
        return this.field_5_x;
    }

    public void setX(int i) {
        this.field_5_x = i;
    }

    public int getY() {
        return this.field_6_y;
    }

    public void setY(int i) {
        this.field_6_y = i;
    }

    public int getWidth() {
        return this.field_7_width;
    }

    public void setWidth(int i) {
        this.field_7_width = i;
    }

    public int getHeight() {
        return this.field_8_height;
    }

    public void setHeight(int i) {
        this.field_8_height = i;
    }

    public short getOptions1() {
        return this.field_9_options1;
    }

    public void setOptions1(short s) {
        this.field_9_options1 = s;
    }

    public short getIndexOfColorValue() {
        return this.field_10_indexOfColorValue;
    }

    public void setIndexOfColorValue(short s) {
        this.field_10_indexOfColorValue = s;
    }

    public short getOptions2() {
        return this.field_11_options2;
    }

    public void setOptions2(short s) {
        this.field_11_options2 = s;
    }

    public short getTextRotation() {
        return this.field_12_textRotation;
    }

    public void setTextRotation(short s) {
        this.field_12_textRotation = s;
    }

    public void setAutoColor(boolean z) {
        this.field_9_options1 = autoColor.setShortBoolean(this.field_9_options1, z);
    }

    public boolean isAutoColor() {
        return autoColor.isSet(this.field_9_options1);
    }

    public void setShowKey(boolean z) {
        this.field_9_options1 = showKey.setShortBoolean(this.field_9_options1, z);
    }

    public boolean isShowKey() {
        return showKey.isSet(this.field_9_options1);
    }

    public void setShowValue(boolean z) {
        this.field_9_options1 = showValue.setShortBoolean(this.field_9_options1, z);
    }

    public boolean isShowValue() {
        return showValue.isSet(this.field_9_options1);
    }

    public void setVertical(boolean z) {
        this.field_9_options1 = vertical.setShortBoolean(this.field_9_options1, z);
    }

    public boolean isVertical() {
        return vertical.isSet(this.field_9_options1);
    }

    public void setAutoGeneratedText(boolean z) {
        this.field_9_options1 = autoGeneratedText.setShortBoolean(this.field_9_options1, z);
    }

    public boolean isAutoGeneratedText() {
        return autoGeneratedText.isSet(this.field_9_options1);
    }

    public void setGenerated(boolean z) {
        this.field_9_options1 = generated.setShortBoolean(this.field_9_options1, z);
    }

    public boolean isGenerated() {
        return generated.isSet(this.field_9_options1);
    }

    public void setAutoLabelDeleted(boolean z) {
        this.field_9_options1 = autoLabelDeleted.setShortBoolean(this.field_9_options1, z);
    }

    public boolean isAutoLabelDeleted() {
        return autoLabelDeleted.isSet(this.field_9_options1);
    }

    public void setAutoBackground(boolean z) {
        this.field_9_options1 = autoBackground.setShortBoolean(this.field_9_options1, z);
    }

    public boolean isAutoBackground() {
        return autoBackground.isSet(this.field_9_options1);
    }

    public void setRotation(short s) {
        this.field_9_options1 = rotation.setShortValue(this.field_9_options1, s);
    }

    public short getRotation() {
        return rotation.getShortValue(this.field_9_options1);
    }

    public void setShowCategoryLabelAsPercentage(boolean z) {
        this.field_9_options1 = showCategoryLabelAsPercentage.setShortBoolean(this.field_9_options1, z);
    }

    public boolean isShowCategoryLabelAsPercentage() {
        return showCategoryLabelAsPercentage.isSet(this.field_9_options1);
    }

    public void setShowValueAsPercentage(boolean z) {
        this.field_9_options1 = showValueAsPercentage.setShortBoolean(this.field_9_options1, z);
    }

    public boolean isShowValueAsPercentage() {
        return showValueAsPercentage.isSet(this.field_9_options1);
    }

    public void setShowBubbleSizes(boolean z) {
        this.field_9_options1 = showBubbleSizes.setShortBoolean(this.field_9_options1, z);
    }

    public boolean isShowBubbleSizes() {
        return showBubbleSizes.isSet(this.field_9_options1);
    }

    public void setShowLabel(boolean z) {
        this.field_9_options1 = showLabel.setShortBoolean(this.field_9_options1, z);
    }

    public boolean isShowLabel() {
        return showLabel.isSet(this.field_9_options1);
    }

    public void setDataLabelPlacement(short s) {
        this.field_11_options2 = dataLabelPlacement.setShortValue(this.field_11_options2, s);
    }

    public short getDataLabelPlacement() {
        return dataLabelPlacement.getShortValue(this.field_11_options2);
    }

    public HSSFRecordTypes getGenericRecordType() {
        return HSSFRecordTypes.TEXT;
    }

    public Map<String, Supplier<?>> getGenericProperties() {
        LinkedHashMap linkedHashMap = new LinkedHashMap();
        linkedHashMap.put("horizontalAlignment", GenericRecordUtil.getEnumBitsAsString(new TextRecord$$ExternalSyntheticLambda0(this), new int[]{1, 2, 3, 4}, new String[]{"LEFT", "CENTER", "BOTTOM", "JUSTIFY"}));
        linkedHashMap.put(CellUtil.VERTICAL_ALIGNMENT, GenericRecordUtil.getEnumBitsAsString(new TextRecord$$ExternalSyntheticLambda9(this), new int[]{1, 2, 3, 4}, new String[]{"TOP", "CENTER", "BOTTOM", "JUSTIFY"}));
        linkedHashMap.put("displayMode", GenericRecordUtil.getEnumBitsAsString(new TextRecord$$ExternalSyntheticLambda10(this), new int[]{1, 2}, new String[]{"TRANSPARENT", "OPAQUE"}));
        linkedHashMap.put("rgbColor", new TextRecord$$ExternalSyntheticLambda11(this));
        linkedHashMap.put("x", new TextRecord$$ExternalSyntheticLambda12(this));
        linkedHashMap.put("y", new TextRecord$$ExternalSyntheticLambda13(this));
        linkedHashMap.put("width", new TextRecord$$ExternalSyntheticLambda1(this));
        linkedHashMap.put("height", new TextRecord$$ExternalSyntheticLambda2(this));
        linkedHashMap.put("options1", GenericRecordUtil.getBitsAsString((Supplier<Number>) new TextRecord$$ExternalSyntheticLambda3(this), new BitField[]{autoColor, showKey, showValue, vertical, autoGeneratedText, generated, autoLabelDeleted, autoBackground, showCategoryLabelAsPercentage, showValueAsPercentage, showBubbleSizes, showLabel}, new String[]{"AUTO_COLOR", "SHOW_KEY", "SHOW_VALUE", "VERTICAL", "AUTO_GENERATED_TEXT", "GENERATED", "AUTO_LABEL_DELETED", "AUTO_BACKGROUND", "SHOW_CATEGORY_LABEL_AS_PERCENTAGE", "SHOW_VALUE_AS_PERCENTAGE", "SHOW_BUBBLE_SIZES", "SHOW_LABEL"}));
        linkedHashMap.put("rotation", GenericRecordUtil.getEnumBitsAsString(new TextRecord$$ExternalSyntheticLambda4(this), new int[]{0, 1, 2, 3}, new String[]{"NONE", "TOP_TO_BOTTOM", "ROTATED_90_DEGREES", "ROTATED_90_DEGREES_CLOCKWISE"}));
        linkedHashMap.put("options2", new TextRecord$$ExternalSyntheticLambda5(this));
        linkedHashMap.put("dataLabelPlacement", GenericRecordUtil.getEnumBitsAsString(new TextRecord$$ExternalSyntheticLambda6(this), new int[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, new String[]{"CHART_DEPENDENT", "OUTSIDE", "INSIDE", "CENTER", "AXIS", "ABOVE", "BELOW", "LEFT", "RIGHT", "AUTO", "USER_MOVED"}));
        linkedHashMap.put("indexOfColorValue", new TextRecord$$ExternalSyntheticLambda7(this));
        linkedHashMap.put("textRotation", new TextRecord$$ExternalSyntheticLambda8(this));
        return Collections.unmodifiableMap(linkedHashMap);
    }
}
